AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Sistema Bancario Resiliente con Circuit Breaker - 4 Lambda Functions, DynamoDB y CloudWatch'

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, staging, prod)
    
Resources:
  # DynamoDB Table para estado del sistema
  CircuitBreakerStateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-circuit-breaker-state'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: alias/aws/dynamodb

  # IAM Role para Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BankingSystemPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DescribeTable
                Resource: !GetAtt CircuitBreakerStateTable.Arn
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-*'
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:SendMessage
                Resource: 
                  - !GetAtt CircuitBreakerAlarmsQueue.Arn
                  - !GetAtt CircuitBreakerAlarmsDeadLetterQueue.Arn

  # Lambda Function 1 - Full Service (Nivel 1)
  FullServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: !Sub '${AWS::StackName}-full-service'
      Runtime: nodejs18.x
      Handler: index.handler
      CodeUri: full-service/
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          STATE_TABLE: !Ref CircuitBreakerStateTable
          LOG_LEVEL: INFO

  # Lambda Function 2 - Degraded Service (Nivel 2)
  DegradedServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: !Sub '${AWS::StackName}-degraded-service'
      Runtime: nodejs18.x
      Handler: index.handler
      CodeUri: degraded-service/
      Timeout: 15
      MemorySize: 128
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          STATE_TABLE: !Ref CircuitBreakerStateTable
          LOG_LEVEL: INFO

  # Lambda Function 3 - Maintenance Service (Nivel 3)
  MaintenanceServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: !Sub '${AWS::StackName}-maintenance-service'
      Runtime: nodejs18.x
      Handler: index.handler
      CodeUri: maintenance-service/
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          STATE_TABLE: !Ref CircuitBreakerStateTable
          LOG_LEVEL: INFO

  # Lambda Function 4 - Circuit Breaker Controller
  CircuitBreakerControllerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: !Sub '${AWS::StackName}-circuit-breaker-controller'
      Runtime: nodejs18.x
      Handler: index.handler
      CodeUri: circuit-breaker-controller/
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          STATE_TABLE: !Ref CircuitBreakerStateTable
          FULL_SERVICE_FUNCTION: !Ref FullServiceFunction
          DEGRADED_SERVICE_FUNCTION: !Ref DegradedServiceFunction
          MAINTENANCE_SERVICE_FUNCTION: !Ref MaintenanceServiceFunction
          LOG_LEVEL: INFO

  # Lambda Function 5 - Alarm Processor
  AlarmProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: !Sub '${AWS::StackName}-alarm-processor'
      Runtime: nodejs18.x
      Handler: index.handler
      CodeUri: alarm-processor/
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          STATE_TABLE: !Ref CircuitBreakerStateTable
          LOG_LEVEL: INFO

  # SQS Queue for CloudWatch alarms
  CircuitBreakerAlarmsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-circuit-breaker-alarms'
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600  # 14 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt CircuitBreakerAlarmsDeadLetterQueue.Arn
        maxReceiveCount: 3

  # Dead Letter Queue for failed alarm processing
  CircuitBreakerAlarmsDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-circuit-breaker-alarms-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  # SNS Topic para notificaciones
  CircuitBreakerTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-circuit-breaker-notifications'
      DisplayName: 'Circuit Breaker Notifications'

  # Suscripción SNS -> SQS para recibir alarmas en la cola
  SnsToSqsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref CircuitBreakerTopic
      Protocol: sqs
      Endpoint: !GetAtt CircuitBreakerAlarmsQueue.Arn
      RawMessageDelivery: true

  # Policy de la cola para permitir publicación desde el Topic SNS
  CircuitBreakerAlarmsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref CircuitBreakerAlarmsQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: Allow-SNS-SendMessage
            Effect: Allow
            Principal: "*"
            Action: SQS:SendMessage
            Resource: !GetAtt CircuitBreakerAlarmsQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref CircuitBreakerTopic

  # SQS Event Source Mapping para Alarm Processor
  AlarmProcessorEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt CircuitBreakerAlarmsQueue.Arn
      FunctionName: !Ref AlarmProcessorFunction
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 5
      FunctionResponseTypes:
        - ReportBatchItemFailures

  # API Gateway REST API
  BankingSystemApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-banking-api'
      Description: 'Banking System API con Circuit Breaker'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: execute-api:Invoke
            Resource: '*'

  # API Gateway Resources
  AccountResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BankingSystemApiGateway
      ParentId: !GetAtt BankingSystemApiGateway.RootResourceId
      PathPart: account

  AccountIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BankingSystemApiGateway
      ParentId: !Ref AccountResource
      PathPart: '{accountId}'

  StatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BankingSystemApiGateway
      ParentId: !GetAtt BankingSystemApiGateway.RootResourceId
      PathPart: status

  TestResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BankingSystemApiGateway
      ParentId: !GetAtt BankingSystemApiGateway.RootResourceId
      PathPart: test

  # API Gateway Methods - Account Endpoint (enruta via Controller)
  AccountMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BankingSystemApiGateway
      ResourceId: !Ref AccountIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CircuitBreakerControllerFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
        - StatusCode: 503
          ResponseModels:
            application/json: Empty
        - StatusCode: 500
          ResponseModels:
            application/json: Empty

  # API Gateway Methods - Status Endpoint (directo al Controller)
  StatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BankingSystemApiGateway
      ResourceId: !Ref StatusResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CircuitBreakerControllerFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  # API Gateway Methods - Test Endpoint for K6 (POST request)
  TestMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BankingSystemApiGateway
      ResourceId: !Ref TestResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CircuitBreakerControllerFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
        - StatusCode: 503
          ResponseModels:
            application/json: Empty
        - StatusCode: 500
          ResponseModels:
            application/json: Empty

  # Lambda Permissions para API Gateway (fix tipo y patrón de ARN)
  ControllerApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CircuitBreakerControllerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BankingSystemApiGateway}/*/*/*'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - AccountMethod
      - StatusMethod
      - TestMethod
    Properties:
      RestApiId: !Ref BankingSystemApiGateway
      StageName: !Ref Environment

  # CloudWatch Log Groups
  FullServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FullServiceFunction}'
      RetentionInDays: 14

  DegradedServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${DegradedServiceFunction}'
      RetentionInDays: 14

  MaintenanceServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${MaintenanceServiceFunction}'
      RetentionInDays: 14

  ControllerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CircuitBreakerControllerFunction}'
      RetentionInDays: 30

  AlarmProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AlarmProcessorFunction}'
      RetentionInDays: 30

  # CloudWatch Alarms para monitoreo automático
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-high-error-rate'
      AlarmDescription: 'Alarm when error rate is high'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref FullServiceFunction
      AlarmActions:
        - !Ref CircuitBreakerTopic

Outputs:
  ApiGatewayUrl:
    Description: 'URL base del API Gateway'
    Value: !Sub 'https://${BankingSystemApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-api-url'

  AccountEndpoint:
    Description: 'Endpoint para consultar cuentas'
    Value: !Sub 'https://${BankingSystemApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/account/{accountId}'
    Export:
      Name: !Sub '${AWS::StackName}-account-endpoint'

  StatusEndpoint:
    Description: 'Endpoint para consultar estado del sistema'
    Value: !Sub 'https://${BankingSystemApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/status'
    Export:
      Name: !Sub '${AWS::StackName}-status-endpoint'

  TestEndpoint:
    Description: 'Endpoint para pruebas K6 del circuit breaker'
    Value: !Sub 'https://${BankingSystemApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/test'
    Export:
      Name: !Sub '${AWS::StackName}-test-endpoint'

  DynamoDBTableName:
    Description: 'Nombre de la tabla DynamoDB'
    Value: !Ref CircuitBreakerStateTable
    Export:
      Name: !Sub '${AWS::StackName}-dynamodb-table'

  FullServiceFunctionArn:
    Description: 'ARN de la función Full Service (Nivel 1)'
    Value: !GetAtt FullServiceFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-full-service-arn'

  DegradedServiceFunctionArn:
    Description: 'ARN de la función Degraded Service (Nivel 2)'
    Value: !GetAtt DegradedServiceFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-degraded-service-arn'

  MaintenanceServiceFunctionArn:
    Description: 'ARN de la función Maintenance Service (Nivel 3)'
    Value: !GetAtt MaintenanceServiceFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-maintenance-service-arn'

  CircuitBreakerControllerArn:
    Description: 'ARN de la función Circuit Breaker Controller'
    Value: !GetAtt CircuitBreakerControllerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-controller-arn'
